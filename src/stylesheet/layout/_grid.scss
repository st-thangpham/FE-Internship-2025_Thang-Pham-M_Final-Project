@use "sass:math";
@use "sass:map";
@use "../base/variables";
@use "../base/mixins";

// Mixins for build grid
$grid-columns: 12;

@mixin build-grid($size) {
  @for $i from 1 through $grid-columns {
    @if $size !="" {
      .col-#{$size}-#{$i} {
        flex: 0 0 math.percentage(calc($i / $grid-columns));
        max-width: math.percentage(calc($i / $grid-columns));
      }
    }

    @else {
      .col-#{$i} {
        flex: 0 0 math.percentage(calc($i / $grid-columns));
        max-width: math.percentage(calc($i / $grid-columns));
      }
    }
  }
}

// End mixins for build grid
$grid-gutter: 12px;
$container-padding: 24px;
$container-width: calc(1336px + 48px);

.container {
  padding-left: $container-padding;
  padding-right: $container-padding;
  width: 100%;
  max-width: $container-width;
  position: relative;
  display: flex;
  flex-direction: column;
  margin: auto;
  align-items: center;
  min-height: calc(100vh - map.get(variables.$layout, footer-height));
}

.no-container {
  position: relative;
  padding-left: $container-padding;
  padding-right: $container-padding;
  margin: 0 auto;
  width: 100%;
}

.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: -$grid-gutter;
  margin-right: -$grid-gutter;

  @include mixins.respond-below(medium) {
    margin: 0 -12px;
  }

  >[class*="col-"] {
    padding-left: $grid-gutter;
    padding-right: $grid-gutter;

    @include mixins.respond-below(medium) {
      padding: 0 12px;
    }
  }
}

// Remove gutters (margin, padding) of row & col
.row-no-gutters {
  margin-left: 0;
  margin-right: 0;

  >[class*="col-"] {
    padding-left: 0;
    padding-right: 0;
  }
}

/* Grid for all screen
 * Ex: col-1, col-2 */
@include build-grid("");

$break-points: (
  small: sm,
  medium: md,
  wide: wide,
  large: lg,
  largest: xl,
);

/* Ex :Grid for screen min-width: $small
* col-sm-1, col-sm-2 */
@each $name, $value in $break-points {
  @include mixins.respond-above($name) {
    @include build-grid($value);
  }
}
